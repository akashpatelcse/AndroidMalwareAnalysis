package ManifestParser.EverythingTokenized;


import ManifestParser.util.DatasetFolders;
import ManifestParser.util.stringUtils;
import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import org.jdom2.Attribute;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import java.io.*;
import java.util.*;

import static ManifestParser.util.utilities.getFiles;
import static ManifestParser.util.utilities.getManifest;

public class FeatureSetMaker {


    public static void main(String[] args)
    {
        int errorCounter = 0, totalCounter = 0;

        for(String folder : DatasetFolders.Goodware1819) {
            String[] Files = getFiles(folder);
            for (String fileName : Files) {
                try {
                    totalCounter += 1;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception e) {
                    errorCounter += 1;
                    // e.printStackTrace();
                    System.out.println("Error" + errorCounter + " - " + totalCounter);
                }
            }
            System.out.println("Number of Files" + Files.length);
        }

        for(String folder : DatasetFolders.Malware1819) {
            String[] Files = getFiles(folder);
            for (String fileName : Files) {
                try {
                    totalCounter += 1;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception e) {
                    errorCounter += 1;
                    // e.printStackTrace();
                    System.out.println("Error" + errorCounter + " - " + totalCounter);
                }
            }
            System.out.println("Number of Files" + Files.length);
        }
        manifestParser.printHM();
    }

    static void apkDetails(String filePath){
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            manifestParser mp = new manifestParser(getManifest(filePath));
            mp.SAXParser();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}

class manifestParser{
    static String xmlString;
    static HashMap<String, Integer> hm;


    manifestParser(String xmlString){
        manifestParser.xmlString = xmlString;
            if (hm == null)
        hm = new HashMap<>();
    }

    public void SAXParser(){
        try {
            SAXBuilder sax = new SAXBuilder();
            InputStream targetStream = new ByteArrayInputStream(xmlString.getBytes());
            Document doc = sax.build(targetStream);
            Element rootNode = doc.getRootElement();
            List<String> tags = Arrays.asList("uses-permission", "permission", "uses-feature");//, "service", "receiver", "uses-library", "provider", "action");

            for(String tag : tags){
                parseTag(rootNode, tag);
            }

        } catch (IOException | JDOMException e) {
            e.printStackTrace();
        }
    }

    void parseTag(Element rootNode, String tag){
        List<Element> usesPermissions = rootNode.getChildren(tag);
        tag = tag + " :";
        tag = "";
        for (Element usesPermission : usesPermissions) {
            for(Attribute attri : usesPermission.getAttributes()){
                String key = attri.getValue();
                List<String> token = stringUtils.permissionTockenizer(key);
                for(String k : token) {
                    if(k.contains(" "))
                        continue;
                    k = k.toUpperCase(Locale.ROOT);
                    try {
                        hm.put(tag+k, hm.get(tag+k) + 1);
                    } catch (Exception e) {
                        hm.put(tag+k, 1);
                    }
                }
            }
        }
    }





    public static void printHM(){
        HashMap<String, Integer> hm1 = sortByValue(hm);
        System.out.println(hm1.size());
        WriteToFile(hm1);

    }

    public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<String, Integer> > list =
                new LinkedList<Map.Entry<String, Integer> >(hm.entrySet());

        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

        // put data from sorted list to hashmap
        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }


    static void WriteToFile(HashMap<String, Integer> hm1){
        // new file object
        String path = "ManifestParser/EverythingTokenized/output/1819EveryThingTokenized-Features Permissions and Feature-uses";
        File file = new File(path+java.time.LocalDateTime.now()+".txt");
        BufferedWriter bf = null;

        try {
            // create new BufferedWriter for the output file
            bf = new BufferedWriter(new FileWriter(file));
            for (Map.Entry<String, Integer> entry :
                    hm1.entrySet()) {

                if(entry.getValue() < 10 || entry.getKey().length() < 4)
                    continue;
                bf.write("put( \"" + entry.getKey() + "\", 0 );");//+ ":" + entry.getValue());
               // bf.write( entry.getKey() + ":" + entry.getValue());

                // new line
                bf.newLine();
            }

            bf.flush();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        finally {

            try {
                // always close the writer
                bf.close();
            }
            catch (Exception ignored) {
            }
        }
    }
}
