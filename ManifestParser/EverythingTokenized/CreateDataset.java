package ManifestParser.EverythingTokenized;




import ManifestParser.util.DatasetFolders;
import ManifestParser.util.stringUtils;
import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import org.jdom2.Attribute;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import static ManifestParser.util.utilities.getFiles;
import static ManifestParser.util.utilities.getManifest;

public class CreateDataset {

    public static void main(String[] args)
    {
        allTagTokenizedFeatures.filePath = "/home/akash/Documents/CsvFiles/Final/Tokenized/Final_allTagTokenizedDataset_1012_ "+ java.time.LocalDateTime.now() + ".csv";
        allTagTokenizedFeatures.featureVectorFile = "/home/akash/IdeaProjects/MalwareAnalysis/ManifestParser/EverythingTokenized/output/Final_1012EveryThingTokenized-Features2022-04-05T00:46:37.475652.txt";

        allTagTokenizedFeatures f = new allTagTokenizedFeatures();
        f.writeHeading();

        for(String folder : DatasetFolders.Goodware1012) {
            String[] Files = getFiles(folder);
            for (String fileName : Files) {
                try {
                    allTagTokenizedFeatures.isMalware = 0;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception ignored) {}
            }
            System.out.println("Number of Files" + Files.length);
        }

        for(String folder : DatasetFolders.Malware1012) {
            String[] Files = getFiles(folder);
            for (String fileName : Files) {
                try {
                    allTagTokenizedFeatures.isMalware = 1;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception ignored) {}
            }
            System.out.println("Number of Files" + Files.length);
        }
        System.out.println("File Saved at : " + allTagTokenizedFeatures.filePath);
    }

    static void apkDetails(String filePath){
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            allTagTokenizedDatasetMaker mp = new allTagTokenizedDatasetMaker(getManifest(filePath));
            mp.SAXParser(getManifest(filePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}




class allTagTokenizedDatasetMaker{
    String xmlString;
    static HashMap<String, Integer> hm;


    allTagTokenizedDatasetMaker(String xmlString){
        this.xmlString = xmlString;
        if (hm == null)
            hm = new HashMap<>();
    }

    public void SAXParser(String mani){
        try {
            SAXBuilder sax = new SAXBuilder();
            InputStream targetStream = new ByteArrayInputStream(mani.getBytes());
            Document doc = sax.build(targetStream);
            Element rootNode = doc.getRootElement();
            List<String> tags = Arrays.asList("uses-permission", "permission", "uses-feature", "service", "receiver", "uses-library", "provider", "action");
            allTagTokenizedFeatures f = new allTagTokenizedFeatures();
            for(String tag : tags){
                parseTag(rootNode, tag, f);
            }
            f.writeToFile();
        } catch (IOException | JDOMException e) {
            e.printStackTrace();
        }
    }

    void parseTag(Element rootNode, String tag, allTagTokenizedFeatures f){
        List<Element> usesPermissions = rootNode.getChildren(tag);
        tag = tag + " :";
        tag = "";
        for (Element usesPermission : usesPermissions) {
            for(Attribute attri : usesPermission.getAttributes()){
                String key = attri.getValue();
                List<String> token = stringUtils.permissionTockenizer(key);
                for(String k : token) {
                    if(k.contains(" "))
                        continue;
                    k = k.toUpperCase(Locale.ROOT);
                    f.add(k);
                }
            }
        }
    }

}