package ManifestParser.EverythingNotTokenized;




import ManifestParser.PermissionsOnly.PermissionsOnlyFeatures2015;
import ManifestParser.util.DatasetFolders;
import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import org.jdom2.Attribute;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import static ManifestParser.util.utilities.getFiles;
import static ManifestParser.util.utilities.getManifest;

public class CreateDataset {


    public static void main(String[] args)
    {
        allTagUntokenizedFeatures2015.filePath = "/home/akash/Documents/CsvFiles/Final/PermissionsAndOtherFeatures/Final_2020_Everything_1019_"+ java.time.LocalDateTime.now() + ".csv";
        allTagUntokenizedFeatures2015.featureVectorFile =  "/home/akash/IdeaProjects/MalwareAnalysis/ManifestParser/EverythingNotTokenized/output/Final_1019EveryThingUntokenized-Features_2022-04-05T20:00:03.484470.txt";
        allTagUntokenizedFeatures2015 f = new allTagUntokenizedFeatures2015();
        f.writeHeading();
        String[] goodware = DatasetFolders.Goodware20;
        String[] malware =  DatasetFolders.Malware20;

        for(String folder :malware) {
            String[] Files = getFiles(folder);
            for (String fileName : Files) {
                try {
                    allTagUntokenizedFeatures2015.isMalware = 1;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception ignored) {}
            }
            System.out.println("Number of Files" + Files.length);
        }

        for(String folder : goodware) {
            String[] Files = getFiles(folder);
            for (String fileName : Files) {
                try {
                    allTagUntokenizedFeatures2015.isMalware = 0;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception ignored) {}
            }
            System.out.println("Number of Files" + Files.length);
        }

        System.out.println("File Saved at : " + allTagUntokenizedFeatures2015.filePath);
    }

    static void apkDetails(String filePath){
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            allTagUnTokenizedDatasetMaker mp = new allTagUnTokenizedDatasetMaker(getManifest(filePath));
            mp.SAXParser(getManifest(filePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}

class allTagUnTokenizedDatasetMaker {
    static String xmlString;
    static HashMap<String, Integer> hm;

    allTagUnTokenizedDatasetMaker(String xmlString){
        allTagUnTokenizedDatasetMaker.xmlString = xmlString;
        if (hm == null)
            hm = new HashMap<>();
    }

    public void SAXParser(String mani){
        try {
            SAXBuilder sax = new SAXBuilder();
            InputStream targetStream = new ByteArrayInputStream(mani.getBytes());
            Document doc = sax.build(targetStream);
            Element rootNode = doc.getRootElement();
            List<String> tags = Arrays.asList("uses-permission", "permission", "uses-feature", "service", "receiver", "uses-library", "provider", "action", "activity","category");

            allTagUntokenizedFeatures2015 f = new allTagUntokenizedFeatures2015();
            for(String tag : tags){
                parseTag(rootNode, tag, f);
            }
            f.writeToFile();
        } catch (IOException | JDOMException e) {
            e.printStackTrace();
        }
    }

    void parseTag(Element rootNode, String tag, allTagUntokenizedFeatures2015 f){
        List<Element> usesPermissions = rootNode.getChildren(tag);
        for (Element usesPermission : usesPermissions) {
            for(Attribute attri : usesPermission.getAttributes()){
                String key = attri.getValue();
                if(key.contains(" ") || !key.contains("."))
                    continue;
                key = key.toUpperCase(Locale.ROOT);
                f.add(key);
            }
        }
    }

}