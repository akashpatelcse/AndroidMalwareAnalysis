package ManifestParser;

import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import net.dongliu.apk.parser.bean.Permission;
import net.dongliu.apk.parser.bean.UseFeature;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;


import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

public class Parser {
    static String folderName = "/home/akash/ApkFiles";

    public static void main(String[] args)
    {

        long start2 = System.currentTimeMillis();
        apkDetails(folderName + "/aa.apk");
        manifestParser mp = new manifestParser(getManifest(folderName + "/aa.apk"));
        long end2 = System.currentTimeMillis();

        System.out.println("Time = " + Long.toString(end2 - start2));

    }

    static void apkDetails(String filePath){
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
            System.out.println(apkMeta.getLabel());
            System.out.println(apkMeta.getPackageName());
            System.out.println(apkMeta.getVersionCode());
            for (UseFeature feature : apkMeta.getUsesFeatures()) {
                System.out.println(feature.getName());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static String getManifest(String filePath) {
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            String manifestXml = apkFile.getManifestXml();
            String xml = apkFile.transBinaryXml("res/menu/main.xml");
            System.out.println("Manifest: " + manifestXml);
            System.out.println("XML = " + xml);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return " ";
    }
}

class manifestParser{
    String xmlString;
    static List<String> permissions;
    static List<String> features;
    static List<String> intentFilter;
    static List<String> service;

    manifestParser(String xmlString){
        this.xmlString = xmlString;
    }



}
