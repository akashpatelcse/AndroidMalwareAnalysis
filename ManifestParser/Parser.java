package ManifestParser;

import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import net.dongliu.apk.parser.bean.Permission;
import net.dongliu.apk.parser.bean.UseFeature;
import org.jdom2.Attribute;
import org.jdom2.Document;
//import org.w3c.dom.Document;
import org.xml.sax.SAXException;


import java.io.*;
import java.sql.SQLOutput;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import javax.validation.constraints.Null;

public class Parser {
   // public static String folder = "/home/akash/FifteenToSeventeen/Malware/UseIT";
    //public static String folder = "/home/akash/Dataset/fifteenAug";
   public static String[] folders = new String[]{"/home/akash/Documents/Dataset/Malware 2010-12", "/home/akash/Documents/Dataset/Goodware 2010-12"};
    static String tmpFileName = "/home/akash/FifteenToSeventeen/Malware/UseIT_TMP/VirusShare_0a93bc0ae36437d9bdcf92e5c455f28e.apk";

    static String temp = "";

    public static void main(String[] args)
    {
        long start2 = System.currentTimeMillis();
        for(String folder : folders) {
            String[] Files = getFiles(folder);
            int faultCounter = 0;
            for (String fileName : Files) {
                try {
                    apkDetails(folder + "/" + fileName);
                } catch (Exception e) {
                    faultCounter++;
                    e.printStackTrace();
                }
            }
            System.out.println("Number of Files" + Files.length);
            System.out.println(faultCounter);
        }

        long end2 = System.currentTimeMillis();

        System.out.println("Time = " + Long.toString(end2 - start2));
        manifestParser.printHM();


    }

    static void apkDetails(String filePath){
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
           // System.out.println(apkMeta.getLabel());
            //System.out.println(apkMeta.getPackageName());
//            System.out.println(apkMeta.getVersionCode());
//            for (UseFeature feature : apkMeta.getUsesFeatures()) {
//                System.out.println(feature.getName());
//            }
            manifestParser mp = new manifestParser(getManifest(filePath));
            mp.SAXParser();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static String[] getFiles(String folder){
        //https://stackoverflow.com/a/32480517/13556499
        File dir = new File(folder);
        String[] files = dir.list();
        if (files.length == 0) {
            System.out.println("The directory is empty");
        } else {
            for (String aFile : files) {
                System.out.println(aFile);
            }
        }
        return files;
    }

    static String getManifest(String filePath) {
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            String manifestXml = apkFile.getManifestXml();
            String xml = apkFile.transBinaryXml("res/menu/main.xml");
           // System.out.println("Manifest: " + manifestXml);
            return manifestXml;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return " ";
    }
}

class manifestParser{
    static String xmlString;
    static List<String> permissions;
    static List<String> features;
    static List<String> intentFilter;
    static List<String> service;
    static HashMap<String, Integer> hm;

    manifestParser(String xmlString){
        manifestParser.xmlString = xmlString;
            if (hm == null)
        hm = new HashMap<>();
    }


    public void SAXParser(){
        try {

            SAXBuilder sax = new SAXBuilder();
            // XML is in a web-based location

            InputStream targetStream = new ByteArrayInputStream(xmlString.getBytes());
            Document doc = sax.build(targetStream);

            Element rootNode = doc.getRootElement();
            //System.out.println(rootNode.getChildren());
            List<String> permissions = getPermissions(rootNode);
            //getService(rootNode);

        } catch (IOException | JDOMException e) {
            e.printStackTrace();
        }

    }

    List<String> getPermissions(Element rootNode){
        List<String> permissions = new ArrayList<String>();
        List<Element> usesPermissions = rootNode.getChildren("uses-permission");
        for (Element usesPermission : usesPermissions) {
            for(Attribute attri : usesPermission.getAttributes()){
                permissions.add(attri.getValue());
                String key = attri.getValue();
              //  System.out.println(key);
                try {
                    hm.put(key, hm.get(key) + 1);
                }
                catch (Exception e){
                    hm.put(key, 1);
                }
            }
        }
        return permissions;
    }

    void getService(Element rootNode){
        List<Element> application = rootNode.getChildren("application");
        for(Element element : application) {
            System.out.print(element.getName() + ": ");
            System.out.println(element.getChildren());
        }
    }

    public static void printHM(){
        HashMap<String, Integer> hm1 = sortByValue(hm);
      //  hm1.forEach((key, value) -> System.out.println(key + " " + value));
        System.out.println(hm1.size());
        System.out.println(hm.size());
        WriteToFile(hm1);

    }

    public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<String, Integer> > list =
                new LinkedList<Map.Entry<String, Integer> >(hm.entrySet());

        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

        // put data from sorted list to hashmap
        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }

    static void WriteToFile(HashMap<String, Integer> hm1){
        // new file object
        File file = new File("output.txt");

        BufferedWriter bf = null;

        try {

            // create new BufferedWriter for the output file
            bf = new BufferedWriter(new FileWriter(file));
            for (Map.Entry<String, Integer> entry :
                    hm1.entrySet()) {

                // put key and value separated by a colon
                bf.write(entry.getKey() + ":"
                        + entry.getValue());

                // new line
                bf.newLine();
            }

            bf.flush();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        finally {

            try {
                // always close the writer
                bf.close();
            }
            catch (Exception ignored) {
            }
        }
    }


}
