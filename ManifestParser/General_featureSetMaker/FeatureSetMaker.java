package ManifestParser.General_featureSetMaker;

import ManifestParser.util.DatasetFolders;
import ManifestParser.util.ParserUtil;
import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;

import java.io.*;
import java.util.*;

import static ManifestParser.util.utilities.getFiles;
import static ManifestParser.util.utilities.getManifest;

public class FeatureSetMaker {

    static String Dataset = "D1";
    static String version = "M"; //M/G
    static Set<String> feature = new HashSet<>(Arrays.asList("r", "a", "p", "uf", "s")); //r.ac.a.uf.p.s


    public static void main(String[] args){
        String[] Datasets = {"D2", "D3"};
        String[] versions = {"M" , "G"};

        String[] features = {"r" , "a", "uf", "p", "s", "ac"};

        manifestParser.threshold = 1;
        Dataset = "D2";
        manifestParser.path = "ManifestParser/General_featureSetMaker/output/Combined__" + Dataset + "__";
        run();

        Dataset = "D3";
        manifestParser.path = "ManifestParser/General_featureSetMaker/output/Combined__" + Dataset + "__";
        run();

//        for(String d : Datasets){
//            for(String v : versions){
//                for(String f : features){
//                    Dataset = d;
//                    version = v;
//                    feature = f;
//                    if(f.equals("ac"))
//                        manifestParser.threshold = 1000;
//                    else
//                        manifestParser.threshold = 1;
//                    System.out.println("----------------------> Starting: " +  d + v + f);
//                    run();
//                    System.out.println("----------------------> Ending: " +  d + v + f);
//                }
//            }
//        }
    }

    public static void run()
    {

        System.out.println(Dataset);
        String[] goodware = DatasetFolders.getGoodware(Dataset);
        String[] malware =  DatasetFolders.getMalware(Dataset);

        if(goodware == null || malware == null){
            System.out.println("Invalid Dataset, Goodware is NULL");
            return;
        }

        int errorCounter = 0, totalCounter = 0;

        for(String folder : goodware) {
            System.out.println(folder);
            String[] Files = getFiles(folder);
            System.out.println("Number of Files" + Files.length);
            for (String fileName : Files) {
                try {
                    totalCounter += 1;
                    System.out.println(totalCounter);
                    apkDetails(folder + "/" + fileName);
                } catch (Exception e) {
                    errorCounter += 1;
                    System.out.println("Error" + errorCounter + " - " + totalCounter);
                }
            }
        }


        for(String folder : malware) {
            System.out.println(folder);
            String[] Files = getFiles(folder);
            System.out.println("Number of Files" + Files.length);
            for (String fileName : Files) {
                try {
                    System.out.println(totalCounter);
                    totalCounter += 1;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception e) {
                    errorCounter += 1;
                    System.out.println("Error" + errorCounter + " - " + totalCounter);
                }
            }
        }
        System.out.println("Total Counter :" + totalCounter + "/" + errorCounter);
        manifestParser.printHM();
    }

    static void apkDetails(String apkPath){
        try (ApkFile apkFile = new ApkFile(new File(apkPath))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
            manifestParser mp = new manifestParser(getManifest(apkPath));
            String manifestFile = getManifest(apkPath);
            List<String> newList = new ArrayList<String>();

            if(feature.contains("r")){
                newList.addAll(ParserUtil.getAttributes(manifestFile, "receiver"));
            }
            if(feature.contains("a")){
                newList.addAll(ParserUtil.getAttributes(manifestFile, "activity"));
            }
            if(feature.contains("s")){
                newList.addAll(ParserUtil.getAttributes(manifestFile, "service"));
            }
            if(feature.contains("p")){
                newList.addAll(ParserUtil.getPermissions(manifestFile));
            }
            if(feature.contains("uf")){
                newList.addAll(ParserUtil.getUsesFeatures(apkPath));
            }

            if(feature.contains("ac")) {
                newList.addAll(ParserUtil.getApiCalls(apkPath));
            }

            mp.AddElements(newList);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}

class manifestParser{
    static String xmlString;
    static HashMap<String, Integer> hm;

    public static int threshold;


    manifestParser(String xmlString){
        manifestParser.xmlString = xmlString;
        if (hm == null)
            hm = new HashMap<>();
    }

    void add(String key){
        key = key.toUpperCase(Locale.ROOT);
        try {
            hm.put(key, hm.get(key) + 1);
        } catch (Exception e) {
            hm.put(key, 1);
        }
    }


    void AddElements(List<String> l){
        for(String s : l){
            add(s);
        }
    }



    public static void printHM(){
        HashMap<String, Integer> hm1 = sortByValue(hm);
        System.out.println(hm1.size());
        WriteToFile(hm1);

    }

    public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<String, Integer> > list =
                new LinkedList<Map.Entry<String, Integer> >(hm.entrySet());

        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

        // put data from sorted list to hashmap
        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }
    public static String path = "ManifestParser/PermissionsOnly/output/Error Occured";
    static void WriteToFile(HashMap<String, Integer> hm1){
        // new file object

        File file = new File(path+java.time.LocalDateTime.now()+".txt");
        BufferedWriter bf = null;

        try {
            // create new BufferedWriter for the output file
            bf = new BufferedWriter(new FileWriter(file));
            for (Map.Entry<String, Integer> entry :
                    hm1.entrySet()) {
                if(entry.getValue() <= threshold || entry.getKey().length() < 4)
                    continue;
                bf.write( entry.getKey() + ":" + entry.getValue());
                // new line
                bf.newLine();
            }

            bf.flush();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        finally {

            try {
                // always close the writer
                bf.close();
            }
            catch (Exception ignored) {
            }
        }
        hm.clear();
        hm1.clear();
    }

}

