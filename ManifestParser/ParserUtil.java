package ManifestParser;

import ManifestParser.util.utilities;
import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import net.dongliu.apk.parser.bean.Permission;
import net.dongliu.apk.parser.bean.UseFeature;
import org.jdom2.Attribute;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.input.SAXBuilder;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class ParserUtil {

    static String apkPath;
    public static void main(String[] args){
        apkPath = "/home/akash/Dataset/D2/goodware/00cc964cd4dbe689f868869e8cfd938f21cd05930b4c05012e65c1303b50d992.apk";
        String manifest = utilities.getManifest(apkPath);
        System.out.println(manifest);
        System.out.println("------------------------------");
        List<String> activities = getAttributes(manifest, "activity");
        List<String> services = getAttributes(manifest, "service");
        List<String> receiver = getAttributes(manifest, "receiver");
        
       // List<String> usesFeatures = getAttributes(manifest, "uses-feature");
//        List<String> permissions = getPermissions(apkPath);
        List<String> usesFeatures = getUsesFeatures(apkPath);

        System.out.println(activities);
        System.out.println(services);
        System.out.println(receiver);
        System.out.println(permissions);
        System.out.println(usesFeatures);
    }

    static List<String> getAttributes(String manifest, String tag){
        //Tag = activity, service, receiver
        SAXBuilder sax = new SAXBuilder();
        List<String> l = new ArrayList<String>();
        InputStream targetStream = new ByteArrayInputStream(manifest.getBytes());
        Document doc = null;
        try {
            doc = sax.build(targetStream);
        } catch (Exception e) {
            System.out.println("SAX Build Failed");
            return null;
        }
        assert doc != null;
        Element rootNode = doc.getRootElement();
        List<Element> nodes = rootNode.getChildren("application");
        for(Element i : nodes){
            List<Element> node = i.getChildren(tag);
            for(Element ele : node){
                for(Attribute attri : ele.getAttributes()){
                    if(attri.getName().equals("name")) {
                        String key = attri.getValue();
                        key = key.toUpperCase(Locale.ROOT);
                        l.add(key);
                    }
                }
            }
        }
        return l;
    }

    static List<String> getPermissions(String filePath){
        List<String> l = new ArrayList<>();
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
            for (Permission p : apkMeta.getPermissions()) {
                l.add(p.getName());
            }
        } catch (IOException e) {
            return null;
        }
        return l;
    }

    static List<String> getUsesFeatures(String filePath){
        List<String> l = new ArrayList<>();
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
            for (UseFeature f : apkMeta.getUsesFeatures()) {
                l.add(f.getName());
            }
        } catch (IOException e) {
            return null;
        }
        return l;
    }


}
