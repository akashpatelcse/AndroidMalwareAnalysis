package ManifestParser.withAPIcalls;

import ManifestParser.PermissionsOnly.PermissionsOnlyFeatures2015;
import ManifestParser.configuration;
import ManifestParser.util.DatasetFolders;
import ManifestParser.util.stringUtils;
import net.dongliu.apk.parser.ApkFile;
import org.jdom2.Attribute;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
import org.jf.dexlib2.DexFileFactory;
import org.jf.dexlib2.Opcodes;
import org.jf.dexlib2.ReferenceType;
import org.jf.dexlib2.dexbacked.DexBackedDexFile;
import org.jf.dexlib2.iface.ClassDef;
import org.jf.dexlib2.iface.Method;
import org.jf.dexlib2.iface.MethodImplementation;
import org.jf.dexlib2.iface.instruction.Instruction;
import org.jf.dexlib2.iface.instruction.ReferenceInstruction;
import org.jf.dexlib2.iface.reference.MethodReference;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import static ManifestParser.util.utilities.getFiles;
import static ManifestParser.util.utilities.getManifest;

public class CreateDataset {

    public static void main(String[] args)
    {
        APICallOnlyFeatures.filePath = configuration.csvLocation + "A/D2_20_API_IMPFeaturesOnly_"+ java.time.LocalDateTime.now().getMinute()+ ".csv";
        APICallOnlyFeatures.FeatureSetPath = "ManifestParser/withAPIcalls/output/Final_D2_A_ImportantFeatures";


        int counter = 0;
        String D = "20";
        String[] goodware = DatasetFolders.getGoodware(D);
        String[] malware =  DatasetFolders.getMalware(D);

        APICallOnlyFeatures f = new APICallOnlyFeatures();
        f.writeHeading();

        for(String folder : goodware) {
            String[] Files = getFiles(folder);
            for (String fileName : Files) {
                try {
                    System.out.println(fileName);
                    APICallOnlyFeatures.isMalware = 0;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception ignored) {}
                System.out.println(counter++);
            }
            System.out.println("Number of Files" + Files.length);
        }

        for(String folder : malware) {
            String[] Files = getFiles(folder);
            for (String fileName : Files) {
                try {
                    System.out.println(fileName);
                    APICallOnlyFeatures.isMalware = 1;
                    apkDetails(folder + "/" + fileName);
                } catch (Exception ignored) {}
            }
            System.out.println(counter++);
        }

    }

    static void apkDetails(String filePath){
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            apiCallDatasetMaker mp = new apiCallDatasetMaker(getManifest(filePath), filePath);
            mp.SAXParser(getManifest(filePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}


class apiCallDatasetMaker{
    String xmlString;
    static HashMap<String, Integer> hm;
    String location;


    apiCallDatasetMaker(String xmlString, String location){
        this.xmlString = xmlString;
        this.location = location;
        if (hm == null)
            hm = new HashMap<>();
    }

    public void SAXParser(String mani){
        try {
            SAXBuilder sax = new SAXBuilder();
            InputStream targetStream = new ByteArrayInputStream(mani.getBytes());
            Document doc = sax.build(targetStream);
            Element rootNode = doc.getRootElement();

            APICallOnlyFeatures f = new APICallOnlyFeatures();
            try {
                getApiCalls(f);
                f.writeToFile();
            }
            catch (Exception ignored){}

        } catch (IOException | JDOMException e) {
            e.printStackTrace();
        }
    }

    void parseTag(Element rootNode, String tag, APICallOnlyFeatures f){
        List<Element> usesPermissions = rootNode.getChildren(tag);
        tag = tag + " :";
        tag = "";
        for (Element usesPermission : usesPermissions) {
            for(Attribute attri : usesPermission.getAttributes()){
                String key = attri.getValue();
                List<String> token = stringUtils.permissionTockenizer(key);
                for(String k : token) {
                    if(k.contains(" "))
                        continue;
                    k = k.toUpperCase(Locale.ROOT);
                    f.add(k);
                }
            }
        }
    }

    void getApiCalls(APICallOnlyFeatures f){

        DexBackedDexFile dexFile = null ;
        try{
            dexFile = DexFileFactory.loadDexFile(location
                    , Opcodes.getDefault());

        }catch (IOException ioe){
            ioe.printStackTrace();
        }
        if (dexFile != null){
            printMethodInvocations(dexFile, f);
        }else
        {
            System.out.println("getApiCalls"  + "onCreate: dex file is null");
        }

    }

    String APIcallCleaner(String s){
        String s1 = s.substring(s.indexOf("->") + 2);
        s1.trim();
        s = s.replace("(", "\n");

        s = s.replaceAll(".+>", "");
        s = s.split("\n")[0];
        return s;
    }

    //Taken From https://gist.github.com/JesusFreke/396458abb2145224e13773ee649f57c5
    public void printMethodInvocations(DexBackedDexFile dexFile, APICallOnlyFeatures f) {
        for (ClassDef classDef: dexFile.getClasses()) {
            for (Method methodDef: classDef.getMethods()) {
                MethodImplementation methodImpl = methodDef.getImplementation();

                if (methodImpl != null) {
                    for (Instruction instruction: methodImpl.getInstructions()) {
                        if (instruction instanceof ReferenceInstruction) {
                            if (((ReferenceInstruction)instruction).getReferenceType() == ReferenceType.METHOD) {
                                MethodReference methodReference =
                                        (MethodReference) ((ReferenceInstruction)instruction).getReference();
                                String apiCall =  APIcallCleaner(String.valueOf(methodReference));
                                boolean isValid = apiCall.matches("[a-zA-Z]+");
                                if(!isValid)
                                    continue;
                                String tag = "apiCall";
                                String apiCallClass = String.valueOf(methodReference).split("/")[0];
                                tag = " :\t" + String.valueOf(methodReference).split("/")[0];
                                if(apiCall.length() > 2 && (apiCallClass.equals("Landroid") || apiCallClass.equals("Ljava") || apiCallClass.equals("Lorg"))) {
                                    String key = apiCall;
                                    key = key.toUpperCase(Locale.ROOT);
                                    f.add(key);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

}