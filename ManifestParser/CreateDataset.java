package ManifestParser;


import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import org.jdom2.Attribute;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import java.io.*;
import java.util.*;

import static ManifestParser.util.utilities.getFiles;
import static ManifestParser.util.utilities.getManifest;

public class CreateDataset {
    static String[] folders = new String[]{"/home/akash/Documents/Dataset/Malware 2010-12", "/home/akash/Documents/Dataset/Goodware 2010-12"};  //Malware , Goodware
    public static void main(String[] args)
    {
        features f = new features();
        f.writeHeading();
        for(int i = 0; i < 2; i++ ) {
            String[] Files = getFiles(folders[i]);
            if(i == 1) features.isMalware = 0;
            else features.isMalware = 1;
            for (String fileName : Files) {
                try {
                   apkDetails(folders[i] + "/"+fileName);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }

    }

    static void apkDetails(String filePath){
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
            featureSetMaker mp = new featureSetMaker(getManifest(filePath));
            mp.SAXParser(getManifest(filePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}

class featureSetMaker {
    static String xmlString;

    featureSetMaker(String xmlString) {
        manifestParser.xmlString = xmlString;
    }

    public void SAXParser(String mani) {
        try {
            SAXBuilder sax = new SAXBuilder();
            InputStream targetStream = new ByteArrayInputStream(mani.getBytes());
            Document doc = sax.build(targetStream);
            Element rootNode = doc.getRootElement();
            features f = new features();
            checkPermissions(rootNode, f);
            f.writeToFile();
        } catch (IOException | JDOMException e) {
            e.printStackTrace();
        }
    }

    void checkPermissions(Element rootNode, features f) {
        List<Element> usesPermissions = rootNode.getChildren("uses-permission");
        for (Element usesPermission : usesPermissions) {
            for (Attribute attri : usesPermission.getAttributes()) {
                String perm = attri.getValue();
                f.add(perm);
            }
        }
    }

    void getService(Element rootNode) {
        List<Element> application = rootNode.getChildren("application");
        for (Element element : application) {
            System.out.print(element.getName() + ": ");
            System.out.println(element.getChildren());
        }
    }

}