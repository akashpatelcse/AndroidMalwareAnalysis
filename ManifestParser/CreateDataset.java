package ManifestParser;


import ManifestParser.EverythingTokenized.allTagTokenizedFeatures;
import ManifestParser.PermissionsOnly.PermissionsOnlyFeatures;
import ManifestParser.util.stringUtils;
import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import org.jdom2.Attribute;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import java.io.*;
import java.util.*;

import static ManifestParser.util.utilities.getFiles;
import static ManifestParser.util.utilities.getManifest;

public class CreateDataset {
    static String[] folders = new String[]{"/home/akash/Documents/Dataset/Malware 2010-12", "/home/akash/Documents/Dataset/Goodware 2010-12"};  //Malware , Goodware
    public static void main(String[] args)
    {
        allTagTokenizedFeatures f = new allTagTokenizedFeatures();
        f.writeHeading();
        for(int i = 0; i < 2; i++ ) {
            String[] Files = getFiles(folders[i]);
            if(i == 1) allTagTokenizedFeatures.isMalware = 0;
            else allTagTokenizedFeatures.isMalware = 1;
            for (String fileName : Files) {
                try {
                   apkDetails(folders[i] + "/" +fileName);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }

    }

    static void apkDetails(String filePath){
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
            //permissionsOnlyDatasetMaker mp = new permissionsOnlyDatasetMaker(getManifest(filePath));
            allTagTokenizedDatasetMaker mp = new allTagTokenizedDatasetMaker(getManifest(filePath));
            mp.SAXParser(getManifest(filePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}


//Did not Tokenize the permissions.
class permissionsOnlyDatasetMaker {
    static String xmlString;

    permissionsOnlyDatasetMaker(String xmlString) {
        manifestParser.xmlString = xmlString;
    }

    public void SAXParser(String mani) {
        try {
            SAXBuilder sax = new SAXBuilder();
            InputStream targetStream = new ByteArrayInputStream(mani.getBytes());
            Document doc = sax.build(targetStream);
            Element rootNode = doc.getRootElement();
            PermissionsOnlyFeatures f = new PermissionsOnlyFeatures();
            checkPermissions(rootNode, f);
            f.writeHeading();
            f.writeToFile();
        } catch (IOException | JDOMException e) {
            e.printStackTrace();
        }
    }

    void checkPermissions(Element rootNode, PermissionsOnlyFeatures f) {
        List<Element> usesPermissions = rootNode.getChildren("uses-permission");
        for (Element usesPermission : usesPermissions) {
            for (Attribute attri : usesPermission.getAttributes()) {
                String perm = attri.getValue();
                f.add(perm);
            }
        }
    }
}

class allTagTokenizedDatasetMaker{
    static String xmlString;
    static HashMap<String, Integer> hm;


    allTagTokenizedDatasetMaker(String xmlString){
        manifestParser.xmlString = xmlString;
        if (hm == null)
            hm = new HashMap<>();
    }

    public void SAXParser(String mani){
        try {
            SAXBuilder sax = new SAXBuilder();
            InputStream targetStream = new ByteArrayInputStream(mani.getBytes());
            Document doc = sax.build(targetStream);
            Element rootNode = doc.getRootElement();
            List<String> tags = Arrays.asList("uses-permission", "permission", "uses-feature", "service", "receiver", "uses-library", "provider", "action");
            allTagTokenizedFeatures f = new allTagTokenizedFeatures();
            for(String tag : tags){
                parseTag(rootNode, tag, f);
            }
            f.writeToFile();
        } catch (IOException | JDOMException e) {
            e.printStackTrace();
        }
    }

    void parseTag(Element rootNode, String tag, allTagTokenizedFeatures f){
        List<Element> usesPermissions = rootNode.getChildren(tag);
        tag = tag + " :";
        tag = "";
        for (Element usesPermission : usesPermissions) {
            for(Attribute attri : usesPermission.getAttributes()){
                String key = attri.getValue();
                List<String> token = stringUtils.permissionTockenizer(key);
                for(String k : token) {
                    if(k.contains(" "))
                        continue;
                    k = k.toUpperCase(Locale.ROOT);
                    f.add(k);
                }
            }
        }
    }

}