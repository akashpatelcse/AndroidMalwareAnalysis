package ManifestParser.General;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Parser {
    static String xmlString;
    int scanAllApps = 0;
    //  static String TAG = "ManifestParser";
    Set<String> permissionSet;
    Set<String> serviceSet;
    Set<String> actionSet;
    Set<String> receiverSet;
    Set<String> featureSet;


    public Parser(String xmlString) {
        Parser.xmlString = xmlString;
    }

    public List<Integer> getInputArray() throws XmlPullParserException, IOException {

        List<Integer> featureVector = new ArrayList<>();
        permissionSet = new HashSet<>();
        serviceSet = new HashSet<>();
        actionSet = new HashSet<>();
        receiverSet = new HashSet<>();
        featureSet = new HashSet<>();

        Set<String> attributeList = new HashSet<>();

            XmlPullParserFactory xmlFactoryObject = XmlPullParserFactory.newInstance();
            XmlPullParser myParser = xmlFactoryObject.newPullParser();
            InputStream targetStream = new ByteArrayInputStream(xmlString.getBytes());
            myParser.setInput(targetStream, null);
            features f = new features();
            int event = myParser.getEventType();

            while (event != XmlPullParser.END_DOCUMENT)  {
                String name=myParser.getName();
                attributeList.add(name);
                if(name != null){
                    if(name.equals("uses-permission")) {
                        // Log.d("Attri", "permission: " + myParser.getAttributeValue(null,"android:name"));
                        f.add(myParser.getAttributeValue(null,"android:name"));
                        if(scanAllApps == 0)
                            permissionSet.add(myParser.getAttributeValue(null,"android:name").replace("android.permission", ""));
                    }

                    else if( name.equals("uses-feature")){
                        try {
                            // Log.d("Attri", "uses-features: " + myParser.getAttributeValue(null,"android:name"));
                            if(scanAllApps == 0)
                                featureSet.add(myParser.getAttributeValue(null,"android:name"));
                        }
                        catch (Exception ignored){}
                    }
                    else if(name.equals("action")){
                        try {
                            //Log.d("Attri", "action: " + myParser.getAttributeValue(null,"android:name"));
                            if(scanAllApps == 0)
                                actionSet.add(myParser.getAttributeValue(null,"android:name"));
                        }
                        catch (Exception ignored){}
                    }
                    else if(name.equals("service")){
                        try {
                            // Log.d("Attri", "service: " + myParser.getAttributeValue(null,"android:name"));
                            if(scanAllApps == 0)
                                serviceSet.add(myParser.getAttributeValue(null,"android:name"));
                        }
                        catch (Exception ignored){}
                    }
                    else if(name.equals("receiver")){
                        try {
                            //  Log.d("Attri", "receiver: " + myParser.getAttributeValue(null,"android:name"));
                            if(scanAllApps == 0)
                                receiverSet.add(myParser.getAttributeValue(null,"android:name"));
                        }
                        catch (Exception e){
                        }
                    }
                }
                event = myParser.next();
            }
            featureVector = f.getPermList();


        //Log.d("Attri",attributeList.toString() );
        return featureVector;
    }

    public String getPermissionSet() {
        return setToString(permissionSet);
    }

    public String getServiceSet() {
        return setToString(serviceSet);
    }

    public String getActionSet() {
        return setToString(actionSet);
    }

    public String getReceiverSet() {
        return setToString(receiverSet);
    }

    public String getFeatureSet() {
        return setToString(featureSet);
    }

    String setToString(Set<String> set){

            StringBuilder ans = new StringBuilder();
            for(String s : set){
                ans.append( s + ",\n");
            }
            return ans.toString();

    }
}