package FeatureExtractor.util;

import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import net.dongliu.apk.parser.bean.UseFeature;
import org.jdom2.Attribute;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.input.SAXBuilder;
import org.jf.dexlib2.DexFileFactory;
import org.jf.dexlib2.Opcodes;
import org.jf.dexlib2.ReferenceType;
import org.jf.dexlib2.dexbacked.DexBackedDexFile;
import org.jf.dexlib2.iface.ClassDef;
import org.jf.dexlib2.iface.Method;
import org.jf.dexlib2.iface.MethodImplementation;
import org.jf.dexlib2.iface.instruction.Instruction;
import org.jf.dexlib2.iface.instruction.ReferenceInstruction;
import org.jf.dexlib2.iface.reference.MethodReference;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

//Used by other classes to parse required feature.

public class ParserUtil {

//    static String apkPath;
//    public static void main(String[] args){
//        apkPath = "/media/akash/backup/Dataset/18-20/malware/2019/Q2/5/0d50317ee14ce2176114d15bd16062318ee4df86e8ff979385e381023d81593c.apk";
//        String manifest = utilities.getManifest(apkPath);
//        System.out.println(manifest);
//        System.out.println("------------------------------");
////        List<String> activities = getAttributes(manifest, "activity");
////        List<String> services = getAttributes(manifest, "service");
////        List<String> receiver = getAttributes(manifest, "receiver");
//        List<String> permissions = getPermissions(manifest);
////        List<String> usesFeatures = getUsesFeatures(apkPath);
////
////        System.out.println(activities);
////        System.out.println(services);
////        System.out.println(receiver);
////        System.out.println(permissions);
////        System.out.println(usesFeatures);
//
//        System.out.println(getApiCalls(apkPath));
//    }

    public static List<String> getAttributes(String manifest, String tag){
        //Tag = activity, service, receiver
        SAXBuilder sax = new SAXBuilder();
        List<String> l = new ArrayList<String>();
        InputStream targetStream = new ByteArrayInputStream(manifest.getBytes());
        Document doc = null;
        try {
            doc = sax.build(targetStream);
        } catch (Exception e) {
            System.out.println("SAX Build Failed");
            return null;
        }
        assert doc != null;
        Element rootNode = doc.getRootElement();
        List<Element> nodes = rootNode.getChildren("application");
        for(Element i : nodes){
            List<Element> node = i.getChildren(tag);
            for(Element ele : node){
                for(Attribute attri : ele.getAttributes()){
                    if(attri.getName().equals("name")) {
                        String key = attri.getValue();
                        key = key.toUpperCase(Locale.ROOT);
                        l.add(key);
                    }
                }
            }
        }
        return l;
    }

    public static List<String> getPermissions(String manifest){
        List<String> l = new ArrayList<>();
        SAXBuilder sax = new SAXBuilder();
        InputStream targetStream = new ByteArrayInputStream(manifest.getBytes());
        Document doc = null;
        try {
            doc = sax.build(targetStream);
        } catch (Exception e) {
            System.out.println("SAX Build Failed");
            return null;
        }
        assert doc != null;
        Element rootNode = doc.getRootElement();
        List<Element> perm = rootNode.getChildren("uses-permission");
        for (Element usesPermission : perm) {
            for(Attribute attri : usesPermission.getAttributes()) {
                if(attri.getName().equals("name")) {
                    String key = attri.getValue();
                    key = key.toUpperCase(Locale.ROOT);
                    l.add(key);
                }
            }
        }
        perm.clear();
        perm = rootNode.getChildren("permission");
        for (Element usesPermission : perm) {
            for(Attribute attri : usesPermission.getAttributes()) {
                if(attri.getName().equals("name")) {
                    String key = attri.getValue();
                    key = key.toUpperCase(Locale.ROOT);
                    l.add(key);
                }
            }
        }
        return l;
    }

    public static List<String> getUsesFeatures(String filePath){
        List<String> l = new ArrayList<>();
        try (ApkFile apkFile = new ApkFile(new File(filePath))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
            for (UseFeature f : apkMeta.getUsesFeatures()) {
                l.add(f.getName());
            }
        } catch (IOException e) {
            return null;
        }
        return l;
    }


    //API CAll Section
    public static  List<String> getApiCalls(String apkPath){
        DexBackedDexFile dexFile = null ;
        try{
            dexFile = DexFileFactory.loadDexFile(apkPath
                    , Opcodes.getDefault());

        }catch (IOException ioe){
            ioe.printStackTrace();
        }
        if (dexFile != null){
            return printMethodInvocations(dexFile);
        }else
        {
            System.out.println("getApiCalls"  + "onCreate: dex file is null");
            return null;
        }
    }

    static String APIcallCleaner(String s){
        String s1 = s.substring(s.indexOf("->") + 2);
        s1.trim();
        s = s.replace("(", "\n");

        s = s.replaceAll(".+>", "");
        s = s.split("\n")[0];
        return s;
    }


    //Taken From https://gist.github.com/JesusFreke/396458abb2145224e13773ee649f57c5
    static List<String> printMethodInvocations(DexBackedDexFile dexFile) {
        List<String> l = new ArrayList<>();
        for (ClassDef classDef: dexFile.getClasses()) {
            for (Method methodDef: classDef.getMethods()) {
                MethodImplementation methodImpl = methodDef.getImplementation();

                if (methodImpl != null) {
                    for (Instruction instruction: methodImpl.getInstructions()) {
                        if (instruction instanceof ReferenceInstruction) {
                            if (((ReferenceInstruction)instruction).getReferenceType() == ReferenceType.METHOD) {
                                MethodReference methodReference =
                                        (MethodReference) ((ReferenceInstruction)instruction).getReference();
                                String apiCall =  APIcallCleaner(String.valueOf(methodReference));
                                boolean isValid = apiCall.matches("[a-zA-Z]+");
                                if(!isValid)
                                    continue;
                                String tag = "apiCall";
                                String apiCallClass = String.valueOf(methodReference).split("/")[0];
                                tag = " :\t" + String.valueOf(methodReference).split("/")[0];
                                tag = "";
                                if(apiCall.length() > 2 && (apiCallClass.equals("Landroid") || apiCallClass.equals("Ljava") || apiCallClass.equals("Lorg"))) {
                                    //Add here
                                    String key = apiCall;
                                    key = key.toUpperCase(Locale.ROOT);
                                    l.add(key);
                                }
                            }
                        }
                    }
                }
            }
        }
        return l;
    }




}
